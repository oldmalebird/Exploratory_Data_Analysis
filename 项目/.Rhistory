geom_smooth(method = 'lm')
# 红酒密度与酒精度散点图
ggplot(data=redwine, aes(x = density, y = alcohol)) +
geom_point( alpha = 0.2, color = 'orange') +
xlim(0.99, quantile(redwine$density, 0.95)) +
ylim(6, quantile(redwine$alcohol, 0.95)) +
geom_smooth(method = 'lm')
# 红酒密度与酒精度散点图
ggplot(data=redwine, aes(x = fixed.acidity, y = pH)) +
geom_jitter(alpha = 0.2, color = 'orange') +
ylim(2.5, quantile(redwine$pH, 0.99)) +
#scale_x_log10() +
geom_smooth(method = 'lm')
# 红酒不挥发酸与柠檬酸散点图
ggplot(data=redwine, aes(x = fixed.acidity, y = citric.acid)) +
geom_jitter(alpha = 0.2, color = 'orange') +
ylim(0, quantile(redwine$citric.acid, 0.99)) +
#scale_x_log10() +
geom_smooth(method = 'lm')
# 红酒不挥发酸与密度散点图
ggplot(data=redwine, aes(x = fixed.acidity, y = density)) +
geom_jitter(alpha = 0.2, color = 'orange') +
ylim(0.99, quantile(redwine$density, 0.99)) +
#scale_x_log10() +
geom_smooth(method = 'lm')
ggplot(aes(x = alcohol, y = density, color = quality),
data = redwine) +
geom_point(alpha = 0.2) +
scale_x_log10() +
geom_smooth(method = 'lm', se=FALSE)
ggplot(aes(x = total.sulfur.dioxide, y = sulphates, color = quality),
data = redwine) +
geom_point(alpha = 0.2) +
ylim(0, quantile(redwine$sulphates, 0.99)) +
scale_y_log10() +
geom_smooth(method = 'lm', se=FALSE) +
facet_wrap( ~ quality)
ggplot(aes(x = pH, y = citric.acid, color = quality),
data = redwine) +
geom_point(alpha = 0.2) +
ylim(0, quantile(redwine$citric.acid, 0.99)) +
scale_y_sqrt() +
geom_smooth(method = 'lm', se=FALSE) +
facet_wrap( ~ quality)
ggplot(aes(x = pH, y = citric.acid, color = quality),
data = redwine) +
geom_point(alpha = 0.2) +
ylim(0, quantile(redwine$citric.acid, 0.99)) +
scale_y_sqrt() +
geom_smooth(method = 'lm', se=FALSE) +
facet_wrap( ~ quality)
ggplot(aes(x = volatile.acidity, y = citric.acid, color = quality),
data = redwine) +
geom_point(alpha = 0.2) +
ylim(0, quantile(redwine$citric.acid, 0.99)) +
scale_y_sqrt() +
geom_smooth(method = 'lm', se=FALSE) +
facet_wrap( ~ quality)
ggplot(aes(x = alcohol, y = density, color = quality),
data = redwine) +
geom_point(alpha = 0.2) +
scale_x_log10() +
geom_smooth(method = 'lm', se=FALSE)
?cor
p1 <- ggplot(data=redwine, aes(x = quality, y = alcohol)) +
geom_jitter( alpha = 0.2, color = 'orange') +
geom_boxplot(alpha = 0.2) +
ylim(8, quantile(redwine$alcohol, 0.99)) +
scale_y_log10() +
stat_summary(fun.y = "mean",
geom = "point",
shape = 4) +
labs(y = 'alcohol (% by volume)', title = 'Alcohol(log10) by Quality')
p2 <- ggplot(data=redwine, aes(x = quality, y = volatile.acidity)) +
geom_jitter( alpha = 0.2, color = 'orange') +
geom_boxplot(alpha = 0.2) +
ylim(0, quantile(redwine$volatile.acidity, 0.99)) +
stat_summary(fun.y = "mean",
geom = "point",
shape = 4) +
labs(y = 'volatile acidity (g / dm^3)', title = 'Volatile acidity by Quality')
p3 <- ggplot(data=redwine, aes(x = quality, y = citric.acid)) +
geom_jitter( alpha = 0.2, color = 'orange') +
geom_boxplot(alpha = 0.2) +
ylim(0.001, quantile(redwine$citric.acid, 0.99)) +
stat_summary(fun.y = "mean",
geom = "point",
shape = 4) +
labs(y = 'citric acid (g / dm^3)', title = 'Citric acid by Quality')
p4 <- ggplot(data=redwine, aes(x = quality, y = sulphates)) +
geom_jitter( alpha = 0.2, color = 'orange') +
geom_boxplot(alpha = 0.2) +
ylim(0.3, quantile(redwine$sulphates, 0.99)) +
scale_y_log10() +
stat_summary(fun.y = "mean",
geom = "point",
shape = 4) +
labs(y = 'sulphates (g / dm^3)', title = 'Sulphates(log10) by Quality')
grid.arrange(p1, p2, p3, p4, ncol = 2)
ggplot(aes(x = alcohol, y = density, color = quality),
data = redwine) +
geom_point(alpha = 0.2) +
scale_x_log10() +
geom_smooth(method = 'lm', se=FALSE) +
labs(x = 'alcohol (% by volume)',
y = 'density (g/cm^3)',
title = 'Density by Quality')
ggplot(aes(x = volatile.acidity, y = citric.acid, color = quality),
data = redwine) +
geom_point(alpha = 0.2) +
ylim(0, quantile(redwine$citric.acid, 0.99)) +
scale_y_sqrt() +
geom_smooth(method = 'lm', se=FALSE) +
facet_wrap( ~ quality) +
labs(x = 'volatile acidity (acetic acid - g / dm^3)',
y = 'citric acid (g / dm^3)',
title = 'Citric Acid(sqrt) by Quality')
library(ggplot2)
data("diamonds")
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point() +
xlim(0, quantile(diamonds$carat, 0.99)) +
ylim(0, quantile(diamonds$price, 0.99))
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(color = '#F79420', alpha = 1/10) +
stat_smooth(method = 'lm') +
xlim(0, quantile(diamonds$carat, 0.99)) +
ylim(0, quantile(diamonds$price, 0.99))
# 加载 ggplot 图画组件及其他内容
library(GGally)
library(scales)
library(memisc)
install.packages('memisc')
library(gridExtra)
p1 <- qplot(data = diamonds, x = price, binwidth = 100,
fill = I('#099DD9')) +
ggtitle('Price')
p2 <- qplot(data = diamonds, x = price, binwidth = 0.01,
fill = I('#F79420')) +
scale_x_log10()
ggtitle('Price (log10)')
grid.arrange(p1, p2, ncol=2)
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'color', #去掉reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and color')
# 加载 ggplot 图画组件及其他内容
library(GGally)
library(scales)
library(memisc)
# 数据集中 10,000 个钻石的样本
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'color', #去掉reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and color')
?cuberoot_trans
??cuberoot_trans
library(ggplot2)
data("diamonds")
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point() +
xlim(0, quantile(diamonds$carat, 0.99)) +
ylim(0, quantile(diamonds$price, 0.99))
qplot(x = carat, y = price, data = diamonds) +
geom_point(fill = '#F79420', color = 'black', shape = 21) +
#geom_point(fill = I('#F79420'), color = I('black'), shape = 21) +也可
xlim(0, quantile(diamonds$carat, 0.99)) +
ylim(0, quantile(diamonds$price, 0.99))
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(color = '#F79420', alpha = 1/10) +
stat_smooth(method = 'lm') +
xlim(0, quantile(diamonds$carat, 0.99)) +
ylim(0, quantile(diamonds$price, 0.99))
# 加载 ggplot 图画组件及其他内容
library(GGally)
library(scales)
library(memisc)
# 数据集中 10,000 个钻石的样本
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))),
axisLabels ='internal')
library(gridExtra)
p1 <- qplot(data = diamonds, x = price, binwidth = 100,
fill = I('#099DD9')) +
ggtitle('Price')
p2 <- qplot(data = diamonds, x = price, binwidth = 0.01,
fill = I('#F79420')) +
scale_x_log10()
ggtitle('Price (log10)')
grid.arrange(p1, p2, ncol=2)
qplot(x = carat, y = price, data = diamonds) +
geom_point(fill = '#F79420', color = 'black', shape = 21) +
#geom_point(fill = I('#F79420'), color = I('black'), shape = 21) +也可
scale_y_log10() +
ggtitle('Price (log10) by Carat')
#xlim(0, quantile(diamonds$carat, 0.99)) +
#ylim(0, quantile(diamonds$price, 0.99))
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$carat), decreasing = T))
head(sort(table(diamonds$price), decreasing = T))
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/5, size = 0.75, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# 安装并加载 RColorBrewer 组件
library(RColorBrewer)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and cut')
?scale_color_brewer
ggplot(aes(x = alcohol, y = density, color = quality),
data = redwine) +
geom_point(alpha = 0.2) +
scale_x_log10() +
scale_color_brewer(type = 'div')
geom_smooth(method = 'lm', se=FALSE) +
labs(x = 'log10(alcohol) (% by volume)',
y = 'density (g/cm^3)',
title = 'Alcohol and Density Scatterplot by Quality')
ggplot(aes(x = alcohol, y = density, color = quality),
data = redwine) +
geom_point(alpha = 0.2) +
scale_x_log10() +
scale_color_brewer(type = 'div') +
geom_smooth(method = 'lm', se=FALSE) +
labs(x = 'log10(alcohol) (% by volume)',
y = 'density (g/cm^3)',
title = 'Alcohol and Density Scatterplot by Quality')
ggplot(aes(x = alcohol, y = density, color = quality),
data = redwine) +
#geom_point(alpha = 0.2) +
geom_jitter() +
scale_x_log10() +
scale_color_brewer(type = 'div') +
geom_smooth(method = 'lm', se=FALSE) +
labs(x = 'log10(alcohol) (% by volume)',
y = 'density (g/cm^3)',
title = 'Alcohol and Density Scatterplot by Quality')
ggplot(aes(x = alcohol, y = density, color = quality),
data = redwine) +
#geom_point(alpha = 0.2) +
geom_jitter() +
scale_x_log10() +
scale_color_brewer(type = 'div') +
theme_dark() +
geom_smooth(method = 'lm', se=FALSE) +
labs(x = 'log10(alcohol) (% by volume)',
y = 'density (g/cm^3)',
title = 'Alcohol and Density Scatterplot by Quality')
ggplot(aes(x = alcohol, y = density, color = quality),
data = redwine) +
#geom_point(alpha = 0.2) +
geom_jitter() +
scale_x_log10() +
scale_color_brewer(type = 'div') +
theme_dark() +
geom_smooth(method = 'lm', se=FALSE) +
labs(x = 'log10(alcohol) (% by volume)',
y = 'density (g/cm^3)',
title = 'Alcohol(log10) and Density Scatterplot by Quality')
ggplot(aes(x = alcohol, y = density, color = quality),
data = redwine) +
#geom_point(alpha = 0.2) +
geom_jitter() +
scale_x_log10() +
scale_color_brewer(type = 'div') +
theme_dark() +
geom_smooth(method = 'lm', se=FALSE) +
labs(x = 'alcohol(log10) (% by volume)',
y = 'density (g/cm^3)',
title = 'Alcohol(log10) and Density Scatterplot by Quality')
ggplot(aes(x = volatile.acidity, y = citric.acid, color = quality),
data = redwine) +
geom_point(alpha = 0.2) +
ylim(0, quantile(redwine$citric.acid, 0.99)) +
scale_y_sqrt() +
geom_smooth(method = 'lm', se=FALSE) +
labs(x = 'volatile acidity (acetic acid - g / dm^3)',
y = 'citric acid (g / dm^3)',
title = 'Citric Acid(sqrt) by Quality')
ggplot(aes(x = volatile.acidity, y = citric.acid, color = quality),
data = redwine) +
geom_point(alpha = 0.2) +
ylim(0, quantile(redwine$citric.acid, 0.99)) +
scale_y_sqrt() +
scale_color_brewer(type = 'div') +
theme_dark() +
geom_smooth(method = 'lm', se=FALSE) +
labs(x = 'volatile acidity (acetic acid - g / dm^3)',
y = 'citric acid (g / dm^3)',
title = 'Citric Acid(sqrt) by Quality')
ggplot(aes(x = volatile.acidity, y = citric.acid, color = quality),
data = redwine) +
ylim(0, quantile(redwine$citric.acid, 0.99)) +
scale_y_sqrt() +
scale_color_brewer(type = 'div') +
theme_dark() +
geom_smooth(method = 'lm', se=FALSE) +
labs(x = 'volatile acidity (acetic acid - g / dm^3)',
y = 'citric acid (g / dm^3)',
title = 'Citric Acid(sqrt) by Quality')
ggplot(aes(x = volatile.acidity, y = citric.acid, color = quality),
data = redwine) +
geom_jitter() +
ylim(0, quantile(redwine$citric.acid, 0.99)) +
scale_y_sqrt() +
scale_color_brewer(type = 'div') +
theme_dark() +
geom_smooth(method = 'lm', se=FALSE) +
labs(x = 'volatile acidity (acetic acid - g / dm^3)',
y = 'citric acid (g / dm^3)',
title = 'Citric Acid(sqrt) by Quality')
ggplot(aes(x = volatile.acidity, y = citric.acid, color = quality),
data = redwine) +
geom_jitter() +
ylim(0, quantile(redwine$citric.acid, 0.99)) +
scale_y_sqrt() +
scale_color_brewer(type = 'div') +
theme_dark() +
geom_smooth(method = 'lm', se=FALSE) +
labs(x = 'volatile acidity (acetic acid - g / dm^3)',
y = 'citric acid (g / dm^3)',
title = 'Volatile Acidity and Citric Acid(sqrt) Scatterplot by Quality')
ggplot(aes(x = volatile.acidity, y = citric.acid, color = quality),
data = redwine) +
geom_jitter() +
ylim(0, quantile(redwine$citric.acid, 0.99)) +
scale_y_sqrt() +
coord_cartesian(ylim = c(0,0.9)) +
scale_color_brewer(type = 'div') +
theme_dark() +
geom_smooth(method = 'lm', se=FALSE) +
labs(x = 'volatile acidity (acetic acid - g / dm^3)',
y = 'citric acid (g / dm^3)',
title = 'Volatile Acidity and Citric Acid(sqrt) Scatterplot by Quality')
ggplot(aes(x = volatile.acidity, y = citric.acid, color = quality),
data = redwine) +
geom_jitter() +
ylim(0, quantile(redwine$citric.acid, 0.99)) +
scale_y_sqrt() +
coord_cartesian(ylim = c(0.01, 0.9)) +
scale_color_brewer(type = 'div') +
theme_dark() +
geom_smooth(method = 'lm', se=FALSE) +
labs(x = 'volatile acidity (acetic acid - g / dm^3)',
y = 'citric acid (g / dm^3)',
title = 'Volatile Acidity and Citric Acid(sqrt) Scatterplot by Quality')
ggplot(aes(x = alcohol, y = density, color = quality),
data = redwine) +
geom_jitter() +
scale_color_brewer(type = 'div') +
theme_dark() +
scale_x_log10() +
geom_smooth(method = 'lm', se=FALSE)
ggplot(aes(x = volatile.acidity, y = citric.acid, color = quality),
data = redwine) +
geom_jitter() +
scale_color_brewer(type = 'div') +
theme_dark() +
ylim(0, quantile(redwine$citric.acid, 0.99)) +
scale_y_sqrt() +
geom_smooth(method = 'lm', se=FALSE)
ggplot(aes(x = pH, y = citric.acid, color = quality),
data = redwine) +
geom_jitter() +
scale_color_brewer(type = 'div') +
theme_dark() +
ylim(0, quantile(redwine$citric.acid, 0.99)) +
scale_y_sqrt() +
geom_smooth(method = 'lm', se=FALSE)
ggplot(aes(x = total.sulfur.dioxide, y = sulphates, color = quality),
data = redwine) +
geom_jitter() +
scale_color_brewer(type = 'div') +
theme_dark() +
ylim(0, quantile(redwine$sulphates, 0.99)) +
scale_y_log10() +
geom_smooth(method = 'lm', se=FALSE)
ggplot(aes(x = alcohol, y = density, color = quality),
data = redwine) +
geom_jitter() +
scale_color_brewer(type = 'div') +
theme_dark() +
#scale_x_log10() +
geom_smooth(method = 'lm', se=FALSE)
ggplot(aes(x = volatile.acidity, y = citric.acid, color = quality),
data = redwine) +
geom_jitter() +
ylim(0, quantile(redwine$citric.acid, 0.99)) +
scale_y_sqrt() +
coord_cartesian(ylim = c(0.01, 0.9)) +
scale_color_brewer(type = 'div') +
theme_dark() +
geom_smooth(method = 'lm', se=FALSE) +
labs(x = 'volatile acidity(sqrt) (acetic acid - g / dm^3)',
y = 'citric acid (g / dm^3)',
title = 'Volatile Acidity and Citric Acid(sqrt) Scatterplot by Quality')
ggplot(aes(x = volatile.acidity, y = citric.acid, color = quality),
data = redwine) +
geom_jitter() +
ylim(0, quantile(redwine$citric.acid, 0.99)) +
scale_y_sqrt() +
coord_cartesian(ylim = c(0.01, 0.9)) +
scale_color_brewer(type = 'div') +
theme_dark() +
geom_smooth(method = 'lm', se=FALSE) +
labs(x = 'volatile acidity(acetic acid - g / dm^3)',
y = 'citric acid(sqrt)  (g / dm^3)',
title = 'Volatile Acidity and Citric Acid(sqrt) Scatterplot by Quality')
p1 <- ggplot(data=redwine, aes(x = quality, y = alcohol)) +
geom_jitter( alpha = 0.2, color = 'orange') +
geom_boxplot(alpha = 0.2) +
ylim(8, quantile(redwine$alcohol, 0.99)) +
scale_y_log10() +
stat_summary(fun.y = "mean",
geom = "point",
shape = 4) +
labs(y = 'alcohol(log10) (% by volume)', title = 'Alcohol(log10) by Quality')
p2 <- ggplot(data=redwine, aes(x = quality, y = volatile.acidity)) +
geom_jitter( alpha = 0.2, color = 'orange') +
geom_boxplot(alpha = 0.2) +
ylim(0, quantile(redwine$volatile.acidity, 0.99)) +
stat_summary(fun.y = "mean",
geom = "point",
shape = 4) +
labs(y = 'volatile acidity (g / dm^3)', title = 'Volatile acidity by Quality')
p3 <- ggplot(data=redwine, aes(x = quality, y = citric.acid)) +
geom_jitter( alpha = 0.2, color = 'orange') +
geom_boxplot(alpha = 0.2) +
ylim(0.001, quantile(redwine$citric.acid, 0.99)) +
stat_summary(fun.y = "mean",
geom = "point",
shape = 4) +
labs(y = 'citric acid (g / dm^3)', title = 'Citric acid by Quality')
p4 <- ggplot(data=redwine, aes(x = quality, y = sulphates)) +
geom_jitter( alpha = 0.2, color = 'orange') +
geom_boxplot(alpha = 0.2) +
ylim(0.3, quantile(redwine$sulphates, 0.99)) +
scale_y_log10() +
stat_summary(fun.y = "mean",
geom = "point",
shape = 4) +
labs(y = 'sulphates(log10) (g / dm^3)', title = 'Sulphates(log10) by Quality')
grid.arrange(p1, p2, p3, p4, ncol = 2)
cor(x = fixed.acidity, y = density
cor(x = fixed.acidity, y = density)
cor(x = redwine$fixed.acidity, y = redwine$density)
cor(x = redwine$fixed.acidity, y = redwine$citric.acid)
cor(x = redwine$fixed.acidity, y = redwine$pH)
cor(x = redwine$density, y = redwine$alcohol)
cor(x = redwine$quanlity, y = redwine$alcohol)
