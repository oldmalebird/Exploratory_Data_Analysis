#pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
names(pf)
library(ggplot2)
ggplot(aes(x = dob_day), data = pf) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = 1:31)
qplot(x = tenure/365, data = pf,
xlab = 'Number of years using Facebook',
ylab = 'Number of users in sample',
binwidth = .25, color = I('black'), fill = I('#F79420')) +
scale_x_continuous(breaks = seq(1,7,1), limits = c(0,7))
qplot(x = tenure/365, data = pf,
xlab = 'Number of years using Facebook',
ylab = 'Number of users in sample',
color = I('black'), fill = I('#F79420')) +
scale_x_continuous(breaks = seq(1,7,1), limits = c(0,7))
ggplot(aes(x = age), data = pf) +
geom_histogram(binwidth = 1, fill = '#5760AB') +
scale_x_continuous(breaks = seq(0, 113, 5))
qplot(x = age, data = pf, binwidth =1,
xlab = 'Age',
ylab = 'Number of users in sample',
color = I('black'), fill = I('#5760AB')) +
scale_x_continuous(breaks = seq(0,113,5))
summary(pf$age)
install.packages('gridExtra')
library(gridExtra)
summary(pf$friend_count)
summary(log10(pf$friend_count))
summary(pf$friend_count)
summary(log10(pf$friend_count))
summary(log10(pf$friend_count +1))
summary(pf$friend_count)
summary(log10(pf$friend_count))
summary(log10(pf$friend_count +1))
summary(sqrt(pf$friend_count))
library(gridExtra)
q1 <- qplot(x = friend_count, data = pf)
q2 <- qplot(x = log10(friend_count + 1), data = pf)
q3 <- qplot(x = sqrt(friend_count), data = pf)
library(gridExtra)
q1 <- qplot(x = friend_count, data = pf)
q2 <- qplot(x = log10(friend_count + 1), data = pf)
q3 <- qplot(x = sqrt(friend_count), data = pf)
library(gridExtra)
p1 <- qplot(x = friend_count, data = pf)
p2 <- qplot(x = log10(friend_count + 1), data = pf)
p3 <- qplot(x = sqrt(friend_count), data = pf)
grid.arrange(p1, p2, p3, ncol=1)
p1 <- ggplot(ase(x = friend_count), data = pf) + geom_histogram()
p1 <- ggplot(aes(x = friend_count), data = pf) + geom_histogram()
p2 <- p1 + scale_x_log10()
p3 <- p1 + scale_x_sqrt()
grid.arrange(p1, p2, p3, ncol=1)
logScale <- qplot(x = log10(friend_count + 1), data = pf)
countScale <- ggplot(aes(x = friend_count), data = pf) +
geom_histogram() +
scale_x_log10()
grid.arrange(logScale, countScale, ncol = 2)
logScale <- qplot(x = log10(friend_count), data = pf)
countScale <- ggplot(aes(x = friend_count), data = pf) +
geom_histogram() +
scale_x_log10()
grid.arrange(logScale, countScale, ncol = 2)
qplot(x = friend_count, data = subset(pf,!is.na(gender)), binwidth = 10,
geom = 'freqpoly') +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~ gender)
qplot(x = friend_count, data = subset(pf,!is.na(gender)), binwidth = 10,
geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~ gender)
qplot(x = friend_count, data = subset(pf,!is.na(gender)), binwidth = 10,
geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
qplot(x = friend_count, data = subset(pf,!is.na(gender)), binwidth = 10,
geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50))
qplot(x = friend_count, y = ..count../sum(..count..),data = subset(pf,!is.na(gender)), binwidth = 10,
geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50))
qplot(x = friend_count, y = ..count../sum(..count..),
data = subset(pf,!is.na(gender)),
xlab = 'Friend Count',
ylab = 'Proportion of Users with that friend count',
binwidth = 10,
geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50))
qplot(x = www_likes, data = subset(pf, !is.na(gender)),
geom = 'freqpoly')
qplot(x = www_likes, data = subset(pf, !is.na(gender)),
geom = 'freqpoly', color = gender)
qplot(x = www_likes, data = subset(pf, !is.na(gender)),
geom = 'freqpoly', color = gender) +
scale_x_continuous() +
scale_x_log10()
table(pf$www_likes)
by(pf$www_likes,pf$gender, summary)
table(pf$www_likes)
by(pf$www_likes, pf$gender, sum)
by(pf$www_likes, pf$gender, sum)
<<<<<<< HEAD
install.packages('knitr', dependencies = T)
library(knitr)
install.packages("knitr", dependencies = T)
install.packages("knitr", dependencies = T)
=======
qplot(x = wWw_likes, data = subset(pf, !is.na(gender)),
geom = 'freqpoly', color = gender) +
scale_x_continuous() +
scale_x_log10()
pf = read.delim('pseudo_facebook.tsv')
#视频用的是这个：
#pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
names(pf)
library(ggplot2)
ggplot(aes(x = dob_day), data = pf) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = 1:31)
qplot(x = wWw_likes, data = subset(pf, !is.na(gender)),
geom = 'freqpoly', color = gender) +
scale_x_continuous() +
scale_x_log10()
qplot(x = friend_count, y = ..count../sum(..count..),
data = subset(pf,!is.na(gender)),
xlab = 'Friend Count',
ylab = 'Proportion of Users with that friend count',
binwidth = 10,
geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50))
ggplot(aes(x = friend_count, y = ..count../sum(..count..)), data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
xlab('好友数量') +
ylab('Percentage of users with that friend count')
qplot(x = wWw_likes, data = subset(pf, !is.na(gender)),
geom = 'freqpoly', color = gender) +
scale_x_continuous() +
scale_x_log10()
qplot(x = www_likes, data = subset(pf, !is.na(gender)),
geom = 'freqpoly', color = gender) +
scale_x_continuous() +
scale_x_log10()
qplot(x = gender, y = friend_count,
data = subset(pf,!is.na(gender)),
geom = 'boxplot', color = gender)
#scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50))
qplot(x = gender, y = friend_count,
data = subset(pf,!is.na(gender)),
geom = 'boxplot', color = gender)
#scale_y_continuous(limits = c(0, 1000))
qplot(x = gender, y = friend_count,
data = subset(pf,!is.na(gender)),
geom = 'boxplot', color = gender)
#scale_y_continuous(limits = c(0, 400))
qplot(x = gender, y = friend_count,
data = subset(pf,!is.na(gender)),
geom = 'boxplot', color = gender) +
scale_y_continuous(limits = c(0, 1000))
qplot(x = gender, y = friend_count,
data = subset(pf,!is.na(gender)),
geom = 'boxplot', color = gender, ylim = c(0, 1000))
qplot(x = gender, y = friend_count,
data = subset(pf,!is.na(gender)),
geom = 'boxplot', color = gender) +
coord_cartesian(limits = c(0, 1000))
qplot(x = gender, y = friend_count,
data = subset(pf,!is.na(gender)),
geom = 'boxplot', color = gender) +
coord_cartesian(ylim = c(0, 1000))
by(pf$friend_count, pf$gender, summary)
qplot(x = gender, y = friendships_initiated,
data = subset(pf,!is.na(gender)),
geom = 'boxplot', color = gender)
qplot(x = gender, y = friendships_initiated,
data = subset(pf,!is.na(gender)),
geom = 'boxplot', color = gender) +
coord_cartesian(ylim = c(0,500))
qplot(x = gender, y = friendships_initiated,
data = subset(pf,!is.na(gender)),
geom = 'boxplot', color = gender) +
coord_cartesian(ylim = c(0,200))
by(pf$friendships_initiated, pf$gender, summary)
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
pf$mobile_check_in <- NA
pf$mobile_check_in <- ifelse(pf$mobile_check_in > 0, 1, 0)
summary(pf$mobile_check_in)
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
pf$mobile_check_in <- NA
pf$mobile_check_in <- ifelse(pf$mobile_check_in > 0, 1, 0)
pf$mobile_check_in <- factor(pf$mobile_check_in)
summary(pf$mobile_check_in)
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
pf$mobile_check_in <- NA
pf$mobile_check_in <- ifelse(pf$mobile_likes > 0, 1, 0)
pf$mobile_check_in <- factor(pf$mobile_check_in)
summary(pf$mobile_check_in)
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
pf$mobile_check_in <- NA
pf$mobile_check_in <- ifelse(pf$mobile_likes > 0, 1, 0)
#pf$mobile_check_in <- factor(pf$mobile_check_in)
summary(pf$mobile_check_in)
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
pf$mobile_check_in <- NA
pf$mobile_check_in <- ifelse(pf$mobile_likes > 0, 1, 0)
summary(pf$mobile_check_in)
pf$mobile_check_in <- factor(pf$mobile_check_in)
summary(pf$mobile_check_in)
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
pf$mobile_check_in <- NA
pf$mobile_check_in <- ifelse(pf$mobile_likes > 0, 1, 0)
summary(pf$mobile_check_in)
pf$mobile_check_in <- factor(pf$mobile_check_in)
summary(pf$mobile_check_in)
sum(pf$mobile_check_in == 1) / length(pf$mobile_check_in)
ggplot(aes(x = friend_count), data = pf) +
geom_histogram(binwidth = 25) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50))
'''
'''{r}
ggplot(aes(x = friend_count), data = pf) +
geom_histogram(binwidth = 25) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50))
qplot(x = friend_count, data = pf, binwidth = 25) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50))
options(knitr.duplicate.label = 'allow')
options(knitr.duplicate.label = 'allow')
report_end <- "^# Appendix"
temp <- tempfile(fileext = ".R")
Sys.setenv(PURL_IN = shQuote("this_file.Rmd"), # eg. knitr::current_input()
PURL_OUT = shQuote(temp),
PURL_END = shQuote(report_end))
knitr::read_chunk(temp, labels = "appendix")
>>>>>>> 09d2c41b33fe5c0971fdf0a5f2e14bac47702b42
install.packages('dplyr')
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages('dplyr')
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
library(dplyr)
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
library(dplyr)
install.packages('dplyr')
install.packages("dplyr")
install.packages('dplyr')
install.packages("dplyr")
install.packages("dplyr")
install.packages('dplyr')
install.packages('dplyr')
library(dplyr)
install.packages('dplyr')
install.packages("dplyr")
install.packages("dplyr")
install.packages('dplyr')
?lapply
install.packages('dplyr')
install.packages("dplyr")
install.packages("dplyr")
install.packages('tidyr')
install.packages("tidyr")
.libPaths()
install.packages('dplyr')
install.packages("dplyr")
install.packages("dplyr")
.libPaths()
.libPaths()
Sys.getenv("R_HOME")
.libPaths()
Rcmd_environ
.libPaths()
.libPaths()
install.packages('dplyr')
library(dplyr)
install.packages('dplyr')
install.packages('dplyr')
install.packages('dplyr')
install.packages('dplyr')
library(dplyr)
install.packages('tidyr')
library('tidyr')
library(dplyr)
library(dplyr)
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
pf = read.delim('pseudo_facebook.tsv')
#视频用的是这个：
#pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
names(pf)
qplot(x = age, y = friend_count, data = pf)
summary(pf$age)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point()
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point() +
xlim(13,90)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20) +
xlim(13,90)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_jitter(alpha = 1/20) +
xlim(13,90)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20) +
xlim(13,90) +
coord_trans(y = 'sqrt')
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20) +
xlim(13,90) +
coord_trans(y = 'sqrt')
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(h=0)) +
xlim(13,90) +
coord_trans(y = 'sqrt')
summary(pf$friend_count)
?coord_trans
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point() +
xlim(13,90)
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(h=0)) +
xlim(13,90)
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/20, position = 'jitter') +
xlim(13,90)
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(h=0)) +
xlim(13,90) +
coord_trans(y = 'sqrt')
library(dplyr)
age_group <- group_by(pf, age)
pf.summarise(age_group,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
library(dplyr)
age_group <- group_by(pf, age)
pf.fc_by_age <- summarise(age_group,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
library(dplyr)
age_group <- group_by(pf, age)
pf.fc_by_age <- summarise(age_group,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
head(pf.fc_by_age)
library(dplyr)
age_group <- group_by(pf, age)
pf.fc_by_age <- summarise(age_group,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
pf.fc_by_age <- arrange(pf.fc_by_age,age)
head(pf.fc_by_age)
head(age_group)
pf.fc_by_age_2  <- pf %>%
group_by(age) %>%
summarise(age_group,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age)
pf.fc_by_age_2  <- pf %>%
group_by(age) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age)
head(pf.fc_by_age_2)
ggplot(aex(age, friend_count_mean), data = pf.fc_by_age) +
geom_line()
ggplot(aes(age, friend_count_mean), data = pf.fc_by_age) +
geom_line()
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(h=0)) +
xlim(13,90) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean)
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(h=0),
color = 'orange') +
xlim(13,90) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean)
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(h=0),
color = 'orange') +
xlim(13,90) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, probs =0.1,
linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(h=0),
color = 'orange') +
xlim(13,90) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.1), linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(h=0),
color = 'orange') +
xlim(13,90) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.1), linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.9), linetype = 2, color = 'blue')
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(h=0),
color = 'orange') +
xlim(13,90) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.1), linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.9), linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.9), lcolor = 'blue')
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(h=0),
color = 'orange') +
xlim(13,90) +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.1), linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.9), linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.5), lcolor = 'blue')
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
coord_cartesian(xlim = c(13,17), yim = c(0,1000)) +
geom_point(alpha = 1/20, position = position_jitter(h=0),
color = 'orange') +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.1), linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.9), linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.5), lcolor = 'blue')
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
coord_cartesian(xlim = c(13,70), ylim = c(0,1000)) +
geom_point(alpha = 1/20, position = position_jitter(h=0),
color = 'orange') +
coord_trans(y = 'sqrt') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.1), linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.9), linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.5), lcolor = 'blue')
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
coord_cartesian(xlim = c(13,70), ylim = c(0,1000)) +
geom_point(alpha = 1/20, position = position_jitter(h=0),
color = 'orange') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.1), linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.9), linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.5), lcolor = 'blue')
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
coord_cartesian(xlim = c(13,70), ylim = c(0,1000)) +
geom_point(alpha = 1/20, position = position_jitter(h=0),
color = 'orange') +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.1), linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.9), linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs =0.5), color = 'blue')
cor.test(pf$age, pf$friend_count, method = 'Pearson')
cor.test(pf$age, pf$friend_count, method = 'pearson')
cor.test(pf$age, pf$friend_count, method = 'pearson')
with(pf, cor.test(age, friend_count, method = 'pearson))
cor.test(pf$age, pf$friend_count, method = 'pearson')
with(pf, cor.test(age, friend_count, method = 'pearson'))
